---
import site from "../config/site";
const links = [
  { href: "/", label: "Home" },
  { href: "/generic", label: "Generic" },
  { href: "/elements", label: "Elements" },
  { href: "#contact", label: "Contact", primary: true },
];
---

<!-- Root wraps header + overlay/drawer so behavior can scope to this instance -->
<div data-headerstd-root class="sticky top-0 z-40 backdrop-blur supports-[backdrop-filter]:bg-white/70 bg-white/90 border-b border-line">
  <header class="mx-auto max-w-6xl px-6 h-16 flex items-center justify-between">
    <a href="/" class="font-extrabold tracking-tight text-xl hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-primary/30">
      {site.name}
    </a>

    <!-- Desktop nav -->
    <nav class="hidden md:flex items-center gap-6 text-sm">
      {links.map((l) =>
        l.primary ? (
          <a class="px-4 py-2 rounded-md bg-primary text-white font-medium hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-primary/40" href={l.href}>
            {l.label}
          </a>
        ) : (
          <a class="hover:text-primary focus:outline-none focus:ring-2 focus:ring-primary/30" href={l.href}>
            {l.label}
          </a>
        )
      )}
    </nav>

    <!-- Mobile hamburger -->
    <button
      type="button"
      data-menu-trigger
      class="md:hidden inline-flex items-center justify-center w-10 h-10 rounded-md border border-line hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-primary/40"
      aria-controls="mobile-drawer"
      aria-expanded="false"
    >
      <span class="sr-only">Open menu</span>
      <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
        <path d="M3 6h14M3 10h14M3 14h14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
  </header>

  <!-- Overlay + right-side drawer (SSR: closed, non-interactive) -->
  <div
    data-menu-overlay
    class="fixed inset-0 z-1000 bg-black/30 opacity-0 pointer-events-none transition-opacity duration-300 ease-out md:hidden"
    aria-hidden="true"
  >
    <aside
      data-menu-panel
      id="mobile-drawer"
      class="absolute right-0 top-0 h-full w-[min(85vw,18rem)] bg-white shadow-xl border-l border-slate-200
             transform-gpu translate-x-full transition-transform duration-300 ease-out z-[1001]"
      tabindex="-1"
    >
      <div class="h-16 px-4 flex items-center justify-between border-b border-slate-200">
        <span class="text-sm font-semibold">Menu</span>
        <button
          type="button"
          data-menu-close
          class="inline-flex items-center rounded-md border border-slate-300 px-2 py-1 text-sm hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-primary/40"
        >âœ•</button>
      </div>

      <nav class="p-2">
        {links.map((l) =>
          l.primary ? (
            <a href={l.href} data-menu-link class="block rounded-md px-3 py-2 text-sm bg-primary/10 text-primary hover:bg-primary/15 focus:outline-none focus:ring-2 focus:ring-primary/30">
              {l.label}
            </a>
          ) : (
            <a href={l.href} data-menu-link class="block rounded-md px-3 py-2 text-sm hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-primary/30">
              {l.label}
            </a>
          )
        )}
      </nav>
    </aside>
  </div>
</div>

<script is:inline>
  (() => {
    function init(root) {
      const trigger = root.querySelector('[data-menu-trigger]');
      const overlay = root.querySelector('[data-menu-overlay]');
      const panel   = root.querySelector('[data-menu-panel]');
      const close   = root.querySelector('[data-menu-close]');
      const links   = root.querySelectorAll('[data-menu-link]');

      if (overlay && overlay.parentElement !== document.body) {
        document.body.appendChild(overlay);
        }

      if (!trigger || !overlay || !panel) return;

      let lastFocus = null;
      const reduce = window.matchMedia('(prefers-reduced-motion: reduce)');

      // start closed
      overlay.classList.add('opacity-0','pointer-events-none');
      panel.classList.add('translate-x-full');
      trigger.setAttribute('aria-expanded', 'false');
      overlay.setAttribute('aria-hidden', 'true');

      function setState(open) {
        trigger.setAttribute('aria-expanded', String(open));
        overlay.setAttribute('aria-hidden', String(!open));
      }

      function open() {
        lastFocus = document.activeElement;
        overlay.classList.remove('pointer-events-none');
        if (reduce.matches) {
          overlay.classList.remove('opacity-0'); overlay.classList.add('opacity-100');
          panel.classList.remove('translate-x-full'); panel.classList.add('translate-x-0');
        } else {
          requestAnimationFrame(() => {
            overlay.classList.remove('opacity-0'); overlay.classList.add('opacity-100');
            panel.classList.remove('translate-x-full'); panel.classList.add('translate-x-0');
          });
        }
        setState(true);
        document.documentElement.classList.add('overflow-hidden');
        requestAnimationFrame(() => panel.focus());
        document.addEventListener('keydown', onKeyDown);
        overlay.addEventListener('click', onOverlayClick);
      }

      function closeMenu() {
        overlay.classList.add('opacity-0'); overlay.classList.remove('opacity-100');
        panel.classList.add('translate-x-full'); panel.classList.remove('translate-x-0');
        setState(false);
        const done = () => {
          overlay.classList.add('pointer-events-none');
          overlay.removeEventListener('transitionend', done);
        };
        overlay.addEventListener('transitionend', done);
        document.documentElement.classList.remove('overflow-hidden');
        document.removeEventListener('keydown', onKeyDown);
        overlay.removeEventListener('click', onOverlayClick);
        if (lastFocus && lastFocus.focus) lastFocus.focus();
      }

      function onOverlayClick(e) {
        // only the translucent backdrop (not clicks inside panel)
        if (e.target === overlay) closeMenu();
      }

      function onKeyDown(e) {
        if (e.key === 'Escape') { e.preventDefault(); closeMenu(); return; }
        // light focus trap
        if (e.key === 'Tab') {
          const focusables = overlay.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
          const list = Array.from(focusables).filter(el => !el.hasAttribute('disabled'));
          const first = list[0], last = list[list.length - 1];
          if (!first || !last) return;
          if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
          else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
        }
      }

      trigger.addEventListener('click', () => {
        const isOpen = overlay.getAttribute('aria-hidden') === 'false';
        isOpen ? closeMenu() : open();
      });
      close && close.addEventListener('click', closeMenu);
      links.forEach(a => a.addEventListener('click', closeMenu));
    }

    // bind to all instances safely
    const run = () => document.querySelectorAll('[data-headerstd-root]').forEach(init);
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', run, { once: true });
    } else {
      run();
    }
  })();
</script>
